# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/19_data_sampler.ipynb.

# %% auto 0
__all__ = ['XCSamplerFeatTfm']

# %% ../nbs/19_data_sampler.ipynb 3
import os,pickle,torch,re, numpy as np
from typing import Optional,List

from transformers import BatchEncoding

from fastcore.utils import *

from .transform import PadFeatTfm,CollapseTfm
from .core import store_attr

# %% ../nbs/19_data_sampler.ipynb 14
class XCSamplerFeatTfm:

    def __init__(
        self,
        pad_token:Optional[int]=0,
        oversample:Optional[bool]=False,
        sampling_features:Optional[List]=None,
        **kwargs
    ):
        store_attr('sampling_features,oversample')
        self.pad_proc = PadFeatTfm(pad_tok=pad_token, in_place=False, drop=False)
        self.col_proc = CollapseTfm()

    def sample_feature(self, batch, names, n_samples, oversample):
        feature_names = names.split(',')
        
        if isinstance(n_samples, int): 
            n_samples = (n_samples,)*len(feature_names)

        if len(feature_names) != len(n_samples):
            raise ValueError(f'`feature_names` and `n_samples` should have same length.')
        
        base_name, dep_names = feature_names[0], feature_names[1:]
        base_n_sample, dep_n_samples = n_samples[0], n_samples[1:]

        for p in dep_names:
            if not p.endswith(base_name): 
                raise ValueError(f'{p} does not end with the base prefix `{base_name}`.')

        sampled_batch, sbatch = self.sample_base_feature(batch, names, base_name, base_n_sample, oversample)
        return self.sample_dep_features(sampled_batch, sbatch, dep_names, dep_n_samples, oversample)


# %% ../nbs/19_data_sampler.ipynb 15
@patch
def rename_idx_ptr(self:XCSamplerFeatTfm, x, prefix, sampling_prefix=None):
    prefixes = prefix.split('2')
    for i,n in enumerate(range(len(prefixes)-1,0,-1)):
        s = '2'.join(prefixes[n:])
        p = prefix if sampling_prefix is None else sampling_prefix
        x[f'{p}_{s}2ptr'] = x[f'{prefix}_idx_ptr-{i+1}']
        del x[f'{prefix}_idx_ptr-{i+1}']
    return x
    

# %% ../nbs/19_data_sampler.ipynb 16
@patch
def collate_feature_idx(self:XCSamplerFeatTfm, x, name, sampling_name=None):
    level = name.count('2')
    o = self.pad_proc(x, prefix=f'{name}_idx', lev=level)

    if f'{name}_idx' in o:
        if sampling_name is not None and f'{sampling_name}_idx' not in o:
            o[f'{sampling_name}_idx'] = o[f'{name}_idx']
            del o[f'{name}_idx']
        o = self.rename_idx_ptr(o, name, sampling_name)
        o = {f'p{k}':v for k,v in o.items()}
        
    return o 
    

# %% ../nbs/19_data_sampler.ipynb 17
@patch
def get_rnd_idx_from_ptr(self:XCSamplerFeatTfm, x, n_samples, oversample=True):
    if oversample: return [torch.randint(i, size=(n_samples,)) if i>0 else torch.tensor([-1]) for i in x]
    else: return [torch.randperm(i)[:n_samples] if i>0 else torch.tensor([-1]) for i in x]


# %% ../nbs/19_data_sampler.ipynb 18
@patch
def get_features(self:XCSamplerFeatTfm, x, prefix:str):
    pat = f'^({prefix.replace(",","|")})_.*'
    return [o for o in x if re.match(pat, o)]
    

# %% ../nbs/19_data_sampler.ipynb 19
@patch
def sample_batch(self:XCSamplerFeatTfm, batch, features, idxs, level):
    sbatch = []
    for b,idx in zip(batch, idxs):
        sfeatures = {}
        for feature in features:
            cfeature = self.col_proc(b[feature], level)[0]
            sfeatures[feature] = [] if idx[0] == -1 else [cfeature[i] for i in idx]
        sbatch.append(sfeatures)
    return sbatch
    

# %% ../nbs/19_data_sampler.ipynb 20
@patch
def remove_unwanted_ptr(self:XCSamplerFeatTfm, x):
    return {k:v for k,v in x.items() if not re.match('.*_ptr-[0-9]+$', k)}

@patch
def rename_keys(self:XCSamplerFeatTfm, x, prefix):
    keys = list(x.keys())
    for k in keys:
        nk = k.split('_', maxsplit=1)[1]
        nk = f'{prefix}_{nk}'
        if nk not in x:
            x[nk] = x[k]
            del x[k]
    return x

@patch
def collate_features(self:XCSamplerFeatTfm, x, name, sampling_name=None):
    level = name.count('2')
    o = self.pad_proc(x, prefix=name, lev=level)
    o = self.rename_idx_ptr(o, name, sampling_name)
    o = self.remove_unwanted_ptr(o)
    if sampling_name is not None: o = self.rename_keys(o, sampling_name)
    return o
    

# %% ../nbs/19_data_sampler.ipynb 21
@patch
def sample_base_feature(self:XCSamplerFeatTfm, batch:List, prefix_names:str, name:str, n_sample:int, oversample:Optional[bool]=True):
    sampled_batch, sbatch = {}, {}
    
    feat_prefix = name.split('2')
    sampling_name,ptr_name = f'{feat_prefix[0]}2{feat_prefix[-1]}',feat_prefix[-1]
    
    o = self.collate_feature_idx(batch, name=name, sampling_name=sampling_name)

    if len(o):
        sampling_idx = self.get_rnd_idx_from_ptr(o[f'p{sampling_name}_{ptr_name}2ptr'], n_sample, oversample=oversample)
        
        sampled_batch.update(o)
        
        feats,level = self.get_features(batch[0], prefix_names), name.count('2')-1
        sbatch = self.sample_batch(batch, feats, sampling_idx, level)
    
        o = self.collate_features(sbatch, name=name, sampling_name=sampling_name)
        sampled_batch.update(o)
    
    return sampled_batch, sbatch
    

# %% ../nbs/19_data_sampler.ipynb 22
@patch
def sample_sbatch(self:XCSamplerFeatTfm, batch, features, n_samples, oversample=True):
    sbatch = []
    for b in batch:
        
        idxs = []
        for val in b[features[0]]:
            if oversample: idx = np.random.randint(len(val), size=n_samples) if len(val) > 0 else []
            else: idx = np.random.permutation(len(val))[:n_samples]
            idxs.append(idx)
        
        sfeatures = {}
        for feature in features:
            
            svalues = []
            for val,idx in zip(b[feature],idxs):
                svalues.append([val[i] for i in idx])
                
            sfeatures[feature] = svalues
            
        sbatch.append(sfeatures)
    return sbatch
    

# %% ../nbs/19_data_sampler.ipynb 23
@patch
def sample_dep_features(
    self:XCSamplerFeatTfm, 
    sampled_batch:List, 
    sbatch:List, 
    names:List, 
    n_samples:List, 
    oversample:Optional[bool]=True
):
    for name,n_sample in zip(names,n_samples):
        sampling_name = '2'.join(name.split('2')[:2])
        o = self.collate_feature_idx(sbatch, name=name, sampling_name=sampling_name)

        if len(o):
            sampled_batch.update(o)
            
            feats = self.get_features(sbatch[0], name)
            o = self.sample_sbatch(sbatch, feats, n_sample, oversample=oversample)
            o = self.collate_features(o, name=name, sampling_name=sampling_name)
            sampled_batch.update(o)

    return sampled_batch
    

# %% ../nbs/19_data_sampler.ipynb 24
@patch
def process_features(self:XCSamplerFeatTfm, sampled_batch:BatchEncoding, batch:BatchEncoding, names:List):
    for name in names:
        o = self.collate_features(batch, name=name)
        sampled_batch.update(o)
    return sampled_batch
    

# %% ../nbs/19_data_sampler.ipynb 25
@patch
def __call__(
    self:XCSamplerFeatTfm, 
    batch:List, 
    sampling_features:Optional[List]=None,
    oversample:Optional[bool]=None,
):  
    store_attr('sampling_features,oversample', is_none=False)

    sampled_features = set()
    out = BatchEncoding({})
    for name, n_sample in self.sampling_features:
        o = self.sample_feature(batch, name, n_sample, self.oversample)
        out.update(o)

        sampled_features.update(name.split(','))

    all_features = set([k.split('_')[0] for k in batch[0].keys()])
    remaining_features = all_features.difference(sampled_features)
    out = self.process_features(out, batch, remaining_features)
    
    return out
    
