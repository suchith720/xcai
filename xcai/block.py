# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_block.ipynb.

# %% auto 0
__all__ = ['CFGS', 'TFMS', 'XCBlock', 'SXCBlock']

# %% ../nbs/03_block.ipynb 2
import numpy as np, re, inspect
from typing import Optional, Dict, Callable, Union
from transformers import AutoTokenizer, BatchEncoding, PreTrainedTokenizerBase

from fastcore.meta import *

from .data import *
from .sdata import *
from .transform import *
from .data_sampler import *

from .config import PARAM, WIKISEEALSOTITLES, WIKITITLES, WIKISEEALSO, WIKIPEDIA, ORCAS, AMAZONTITLES131, AMAZON131, AMAZONTITLES

# %% ../nbs/03_block.ipynb 5
CFGS = {
    'wikiseealsotitles':WIKISEEALSOTITLES, 
    'wikititles':WIKITITLES, 
    'wikiseealso':WIKISEEALSO, 
    'wikipedia':WIKIPEDIA,
    'orcas': ORCAS,
    'amazontitles131': AMAZONTITLES131,
    'amazon131': AMAZON131,
    'amazontitles': AMAZONTITLES,
}

TFMS = {
    'xc': [XCPadFeatTfm, AlignInputIdsTfm], 
    'ng': [NGPadFeatTfm], 
    'xcnlg': [XCSamplePadFeatTfm], 
    'rm':[RamenPadFeatTfm],
    'xcs': [XCSamplerFeatTfm],
    'oak': [OAKSamplerFeatTfm],
}

# %% ../nbs/03_block.ipynb 7
class XCBlock:

    @delegates(XCDataBlock.from_cfg)
    @classmethod
    def from_cfg(
        cls, 
        cfg:Union[str,Dict],
        data_dir:Optional[str]=None, 
        dset:Optional[str]='wikiseealsotitles', 
        bsz:Optional[int]=10, 
        **kwargs
    ):
        if isinstance(cfg, str):
            """ Selecting the configuration """
            if dset not in CFGS: raise ValueError(f'Invalid `dset`({dset})')
            cfgs = CFGS[dset](data_dir)
    
            """ Selecting the dataset type """
            if cfg not in cfgs: raise ValueError(f'Invalid `cfg`({cfg})')
            cfg = cfgs[cfg] 

        """ Setting the parameters """
        for k in cfg['parameters']: 
            if k in kwargs: cfg['parameters'][k]=kwargs.pop(k)

        tokenizer = cfg['parameters']['tokenizer']
        tokz = tokenizer if isinstance(tokenizer, PreTrainedTokenizerBase) else AutoTokenizer.from_pretrained(tokenizer)  
        cfg['parameters']['pad_token'] = tokz.pad_token_id
        cfg['parameters']['batch_size'] = bsz
        
        collator = XCCollator(TfmPipeline([o(**cfg['parameters']) for o in TFMS[cfg['parameters']['transform_type']]]))
        
        return XCDataBlock.from_cfg(cfg, collate_fn=collator, **kwargs)


# %% ../nbs/03_block.ipynb 8
class SXCBlock:

    @delegates(SXCDataBlock.from_cfg)
    @classmethod
    def from_cfg(
        cls,
        cfg:Union[str,Dict],
        data_dir:Optional[str]=None, 
        dset:Optional[str]='wikiseealsotitles', 
        collate_fn:Optional[Callable]=identity_collate_fn, 
        **kwargs
    ):
        if isinstance(cfg, str):
            """ Selecting the configuration """
            if dset not in CFGS: raise ValueError(f'Invalid `dset`({dset})')
            cfgs = CFGS[dset](data_dir)
    
            """ Selecting the dataset type """
            if cfg not in cfgs: raise ValueError(f'Invalid `cfg`({cfg})')
            cfg = cfgs[cfg] 

        """ Setting the parameters """
        for k in cfg['parameters']: 
            if k in kwargs: cfg['parameters'][k]=kwargs.pop(k)
            
        return SXCDataBlock.from_cfg(cfg, collate_fn=collate_fn, **kwargs)
        
